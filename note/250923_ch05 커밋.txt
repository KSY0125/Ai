5장 함수
1절. 함수의 정의 및 사용
	1.1 함수의 정의
	- 함수를 사용한다는 것은 함수 호출을 의미한다.
	- 오버로딩이 불가하다 (같은 이름의 함수를 매개변수를 달리 사용하는 것)
	1.2 함수의 설명서 역할 '독스트링'
	- 홑따옴표나 쌍따옴표 상관 없음.
	1.3 지역변수와 전역변수
	- 함수 밖에서 선언된 게 전역변수, 함수 내가 지역변수
	- 전역 변수는 함수 밖에서도 읽기 가능
	- 렉시컬 특성 : 변수가 어디서 선언되었는지에 따라 변수의 범위가 정해짐(지역vs전역)
	1.4 값에 의한 호출 call by value
	- 함수에 인수로 전달되는 변수(매개변수)가 스칼라변수(문자, 숫자, 논리형)일 때
	1.5 참조에 의한 호출 call by reference
	- 함수에 인수로 전달되는 변수가 리스트,튜플,셋,딕셔너리,기타 객체일 경우
2절. 함수의 실행 결과를 반환하는 return
	2.1 return의 정의
	- return은 돌아가라가 아니라, 값을 던졌다는 반환의 의미
	2.2 여러개 값 return
	- 사실 상, 여러 개 값 return이 아닌 "여러 개 값을 갖는 튜플'이라는 1개의 데이터로 return"이 되는거다.
3절. 함수의 매개변수
	3.1 기본값을 갖는 매개변수
	- 순서인수 > 기본값을 갖는 매개변수 순으로 만들 것.
	- 기본값은 3가지를 가질 수 있으며, 상수(80)가 올 수도 변수(L)가 올 수도 있다.
	3.2 기본변수를 기본값으로 갖는 매개변수
	- 기본변수가 스칼라변수(문자, 숫자, 논리형)일 때
	- 기본변수가 리스트, 셋, 딕셔너리, 튜플, 기타 객체일 때
	3.3 순서인수, 키워드인수
	- 순서인수 : 함수에 정의된 순서대로 전달하는 방식
	- 키워드인수 : 인수의 이름을 명시하여 전달하는 방식
	- 함수 정의 시 순서인수와 키워드인수가 같이 올 때는, 꼭 ! 순서인수 > 키워드인수 순으로.
	3.4 튜플 매개변수를 이용한 가변인수 설정
	- 가변인수란 '매개변수의 갯수가 가변인 것'을 의미.
	- def add(*args):
	   args 앞에 * : "args가 튜플로 패킹해서 전달받는다"는 의미
	3.5 딕셔너리 매개변수
	- 여러 개의 키워드 인수를 딕셔너리 형태로 받아서 가변인수로 처리
	- def func5(**args):
	   args 앞에 ** : "args가 딕셔너리로 패킹해서 전달받는다"는 의미
	3.6 함수 정의 시 매개변수 순서. 제일 중요
	- 순서인수 > 튜플인수(*) > 키워드 인수(기본값) > 딕셔너리인수(**)
	3.7 인수의 언패킹
	- 튜플인수 언패킹과 딕셔너리인수 언패킹이 있다
	- 언패킹 : 함수 호출 시, 매개변수 앞에 * 붙임
	- 패킹 : 함수 정의 시 매개변수 앞에 * 붙임(튜플매개변수)
